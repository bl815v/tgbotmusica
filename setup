#!/bin/bash

pprint (){
	cred='\033[0;31m'
	cgreen='\033[0;32m'
	cyellow='\033[0;33m'
	cblue='\033[0;34m'
	cpurple='\033[0;35m'
	eval "export color='$cpurple'"
	[ ! -z $2 ] && eval "export color=\"\$$2\""
    printf "$color $1"
}

color_reset(){ printf '\033[0;37m';}

yesnoprompt(){
	old_stty_cfg=$(stty -g)
	stty raw -echo ; answer=$(head -c 1)
	stty $old_stty_cfg
	echo "$answer" | grep -iq "^y"
}

update() {
	pprint "\n\nActualizacion de la lista de paquetes.. "
	sudo apt update 2>&1 | grep "Se puede actualizar" &>/dev/null
	if [ $? -eq 0 ]; then
		pprint "Actualizacion disponible" "cgreen"
		pprint "\n\Deseas actualizar automaticamente (y/n)?"
		if yesnoprompt; then
			pprint "\n\nActualizando paquetes.. "
			sudo apt upgrade -y &>/dev/null &&
			pprint "Listo!\n\n" "cgreen" || (pprint "Fallo.\n\n" "cred"; exit 1)
		else
			echo
		fi
	else
		pprint "YA ESTA ACTUALIZADO\n\n" "cgreen"
	fi
}

packages(){
	if ! command -v pip &>/dev/null; then
		pprint "No se pudo encontrar pip, instalando ahora..."
		sudo apt install python3-pip -y 2>pypilog.txt 1>/dev/null &&
		pprint "INSTALADO.\n\n" "cgreen" || (pprint "Fallo.\n\n" "cred"; exit 1)
	fi

	if ! command -v ffmpeg &>/dev/null; then
		pprint "No se pudo encontrar ffmpeg, instalando ahora..."
		if sudo apt install ffmpeg -y &>/dev/null;then
			pprint "Listo.\n\n" "cgreen"
		else
			pprint "Fallo.\n\n" "cred"
			pprint "Debe implementar ffmpeg manualmente, saliendo...\n" "cblue"
			exit 1
		fi
	fi

	# Check ffmpeg version and warn user if necessary.
	fv=$(grep -Po 'version (3.*?) ' <<< $(ffmpeg -version)) &&
	pprint "Reproduccion en transmisiones en vivo no va a funcionar ya que tienes ffmpeg $fv, las transmisiones en vivo son compatibles con la version 4+.\n" "cblue"
}


node(){
	command -v npm &>/dev/null && return
	pprint "Instalando Nodejs y Npm..  "
	curl -fssL https://deb.nodesource.com/setup_18.x | sudo -E bash - &>nodelog.txt &&
	sudo apt install nodejs -y &>>nodelog.txt &&
	sudo npm i -g npm &>>nodelog.txt &&
	pprint "LISTO!\n" "cgreen" || (pprint "Fallo.\n" "cred"; exit 1)
}


installation(){
	pprint "\n\nActualizando pip e instalando paquetes de dependencia..."
	pip3 install -U pip &>>pypilog.txt &&
	pip3 install -U -r requirements.txt &>>pypilog.txt &&
	pprint "LISTO.\n" "cgreen" && return
	pprint "Fallo.\n" "cred"
	exit 1
}

clear
pprint "Bienvenido al instalador de configuración de ZedzeXMusic\n\n"
pprint "Si ve algun error durante el proceso de instalacion, consulte estos archivos para obtener registros:"
pprint "\nPara errores de node js, revise nodelog.txt"
pprint "\nPara errores de paquetes pypi, revise pypilog.txt"
sleep 1
pprint "\n\nEl script necesita privilegios sudo para actualizar e instalar paquetes.\n"
sudo test

update
packages
node
installation
pprint "\n\n\n\n\n ZedzeX music instalado completamente!" "cgreen"
sleep 1
clear

pprint "\nIngrese los valores de abajo\n\n\n"
pprint "API ID: "; color_reset; read api_id
pprint "\nAPI HASH: "; color_reset; read api_hash
pprint "\nBOT TOKEN: "; color_reset; read bot_token
pprint "\nOWNER ID:"; color_reset; read ownid
pprint "\nMUSIC BOT NAME: "; color_reset; read mbt
pprint "\nMONGO DB URI: "; color_reset; read mongo_db
pprint "\nLOG GROUP ID: "; color_reset; read logger
pprint "\nSTRING SESSION: "; color_reset; read string_session

pprint "\n\nProcesando sus variables, Espere un momento!" "cgreen"

if [ -f .env ]; then
	rm .env
fi

echo """API_ID = $api_id
API_HASH = $api_hash
BOT_TOKEN = $bot_token
MONGO_DB_URI = $mongo_db
LOG_GROUP_ID = $logger
MUSIC_BOT_NAME = $mbt
STRING_SESSION = $string_session
OWNER_ID = $ownid""" > .env
clear

pprint "\n\n\nGracias por usar el instalador de ZedzeX Music, sus variables se han guardado con éxito! \nIf you wanna add more variables add them in your env by : vi .env"
pprint "\n\nAhora puede iniciar el bot por: bash start\n\n"
